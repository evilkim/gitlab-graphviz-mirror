stages:
    - build_docker_images
    - push_docker_images
    - source
    - build
    - test
    - deploy

portable-source:
    # Doesn't have to wait for all the previous stages, only a docker image of
    # ubuntu-18.04 is required
    needs:
      - docker_build_ubuntu-18.04
    stage: source
    tags:
        - linux
    image: "$CI_REGISTRY_IMAGE/ubuntu-18.04:$CI_COMMIT_SHA"
    before_script:
        # Make Python.h findable
        - export C_INCLUDE_PATH="/usr/include/python3.6m"
        - export CPLUS_INCLUDE_PATH="/usr/include/python3.6m"
    script:
        - ./autogen.sh
        - ./configure --enable-man-pdfs --with-smyrna
        - make dist
        - make dist-xz
    artifacts:
        when: on_success
        expire_in: 1 week
        paths:
            - VERSION
            - DATE
            - COLLECTION
            - graphviz-*.tar.gz
            - graphviz-*.tar.xz
    except:
        - tags

.build_template: &rpm_build_definition
    stage: build
    script:
        - logfile=`mktemp`
        - ci/build.sh |& tee $logfile
        - echo "$CI_JOB_NAME-warnings `grep -c 'warning:' $logfile`" > metrics.txt
        - rm $logfile
        - cat metrics.txt
    artifacts:
        when: on_success
        expire_in: 1 week
        paths:
            - Packages/*/*/*/*/*/*.rpm
            - Packages/*/*/*/*/*.rpm
            - Metadata/*/*/*/configure.log
        reports:
            metrics: metrics.txt
    except:
        - tags
    image: "$CI_REGISTRY_IMAGE/$IMAGE:$CI_COMMIT_SHA"

.build_template: &deb_build_definition
    stage: build
    script:
        - logfile=`mktemp`
        - ci/build.sh |& tee $logfile
        - echo "$CI_JOB_NAME-warnings `grep -c 'warning:' $logfile`" > metrics.txt
        - rm $logfile
        - cat metrics.txt
    artifacts:
        when: on_success
        expire_in: 1 week
        paths:
            - Packages/*/*/*/*/*/*deb
            - Packages/*/*/*/*/*.gz
            - Metadata/*/*/*/configure.log
        reports:
            metrics: metrics.txt
    except:
        - tags
    image: "$CI_REGISTRY_IMAGE/$IMAGE:$CI_COMMIT_SHA"

.build_template: &macos_build_definition
    stage: build
    needs: [] # FIXME: remove when building from portable source
    script:
        - brew update
        - brew install autogen || brew upgrade autogen
        - brew install cmake || brew upgrade cmake
        - brew install bison || brew upgrade bison
        - brew install pango || brew upgrade pango
        - brew install libxaw || brew upgrade libxaw
        - export PATH="/usr/local/opt/bison/bin:$PATH"
        - python3 gen_version.py > VERSION # FIXME: remove when building from portable source
        - echo experimental > COLLECTION
        - logfile=`mktemp`
        - ci/build.sh 2>&1 | tee $logfile
        - echo "$CI_JOB_NAME-warnings `grep -c 'warning:' $logfile`" > metrics.txt
        - rm $logfile
        - cat metrics.txt
    artifacts:
        when: on_success
        expire_in: 1 week
        paths:
            - VERSION
            - COLLECTION
            - Packages/*/*/*/*/*/*.zip
            - Packages/*/*/*/*/*/*.tar.gz
            - Metadata/*/*/*/configure.log
        reports:
            metrics: metrics.txt
    except:
        - tags
    image: macos-11-xcode-12
    # Most submitters don't have access to the macOS runners, and if they try
    # to run macOS pipeline jobs, the jobs will hang forever.  This variable is
    # only set on repos that have access to macOS runners, in GitLab repo
    # settings.
    # https://gitlab.com/graphviz/graphviz/-/settings/ci_cd
    only:
        variables:
          - $ENABLE_GRAPHVIZ_MACOS_CI


.build_template: &windows_build_definition
    stage: build
    needs: []
    script:
        - $ErrorActionPreference = "Stop"
        - $PSDefaultParameterValues['Out-File:Encoding'] = 'utf8'
        - choco install --yes --no-progress --params "/InstallDir:C:\Python3" python3
        - $env:Path = "C:\Python3;" + $env:Path
        - python --version
        - python -m pip install --requirement requirements.txt
        # Toolchain definitions
        - if($Env:project_platform -eq "x64") {
            $TARGET_ARCH = "x64";
          }
          else {
            $TARGET_ARCH = "x86";
          }
        # Retrieve submodules, dependencies are stored there.
        - git submodule update --init --depth 1
        # Install and set PATH
        - $Env:graphviz_install_dir = "C:\Graphviz"
        # Build
        - Set-ExecutionPolicy Bypass -Force -Scope Process
        - $logfile = New-TemporaryFile
        - windows/bin/setup-build-utilities.ps1 2>&1 | tee $logfile
        - python ci/build_windows.py --build-system $env:build_system --platform $Env:project_platform --configuration $env:configuration 2>&1 | tee -a $logfile
        - $warnings_count = (Select-String -Pattern " warning " -Path $logfile).length
        - echo "$CI_JOB_NAME-warnings $warnings_count" > metrics.txt
        - rm $logfile
        - cat metrics.txt
        - python gen_version.py > VERSION
        - python gen_version.py --collection > COLLECTION
        # Package
        - $Env:GV_VERSION=$( cat VERSION )
        - >-
            if($Env:project_platform -eq "x64") {
                $API = "win64";
            } else {
                $API = "win32";
            }
        # Test
        # Set up VCTools variables and import into PowerShell environment
        - cmd.exe /c "call `"C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvarsall.bat`" $TARGET_ARCH && set > %temp%\vcvars.txt";
        - >-
            Get-Content "$env:temp\vcvars.txt" | Foreach-Object {
              if ($_ -match "^([A-Za-z0-9_()]*)=(.*)$") {
                Set-Content "env:\$($matches[1])" $matches[2];
              }
            }
        - >-
            if($env:build_system -eq "cmake") {
              cd build;
              $FILENAME = & invoke-Expression "Get-ChildItem Graphviz*.exe";
              mv $FILENAME graphviz-install.exe;
              # Install using installer and add bin directory to path.
              # Piping the output of the installer to Out-Null, makes the script wait
              # for the .exe to exit, instead continuing to the next command (which
              # will then fail because the install hasn't finished)
              ./graphviz-install.exe /S /D=$env:graphviz_install_dir | Out-Null;
              mv graphviz-install.exe graphviz-install-$Env:GV_VERSION-$API.exe;
              $env:Path = $env:graphviz_install_dir + "\bin" + ";" + $env:Path
              cd ..;
              $Env:INCLUDE += ";C:\Graphviz\include";
              $Env:LIB += ";C:\Graphviz\lib";
            }
            elseif($env:build_system -eq "msbuild") {
              # Append build destination to the PATH, configure dot and execute regression tests
              # The following is per https://gitlab.com/graphviz/graphviz/-/merge_requests/1345
              $env:Path = $env:CI_PROJECT_DIR + "\" + $env:configuration + "\Graphviz\bin" + ";" + $env:Path;
            }
        - python -m pytest --verbose --junitxml=report.xml ci/tests.py tests rtest
        # Create artifacts to archive
        - $ID = "windows"
        - $VERSION_ID = "10"
        - $COLLECTION = $( cat COLLECTION )
        - $DIR = "Packages\${COLLECTION}\${ID}\${VERSION_ID}\$env:build_system\$env:configuration\$Env:project_platform"
        - mkdir -p $DIR
        - >-
            if($env:build_system -eq "cmake") {
                mv "build\*.exe" $DIR;
            } else {
                Compress-Archive -Path "$env:configuration\*" -DestinationPath "$DIR\graphviz-$Env:GV_VERSION-$API.zip";
            }
    artifacts:
        when: on_success
        expire_in: 1 week
        paths:
        - Packages/*/*/*/*/*/*/*.exe
        - Packages/*/*/*/*/*/*/*.zip
        reports:
            metrics: metrics.txt
            junit: report.xml
    tags:
        - windows
    except:
        - tags

.test_template: &test_definition
    stage: test
    script:
        - ci/install-packages.sh
        - export GV_VERSION=$( cat VERSION )
        - export OS_ID=$( cat OS_ID )
        - python3 -m pytest --verbose --junitxml=report.xml ci/tests.py tests rtest
    artifacts:
        reports:
            junit: report.xml
    except:
        - tags

.test_template_including_ctest: &test_definition_including_ctest
    stage: test
    script:
        - ci/install-packages.sh
        - export GV_VERSION=$( cat VERSION )
        - export OS_ID=$( cat OS_ID )
        - ci/test_coverage.py --init
        - pushd build
        - ctest --output-on-failure
        - popd
        # Many of the tests run by pytest currently trigger ASan
        # memory leak detections. Disable those for now.
        - export ASAN_OPTIONS=detect_leaks=0
        - python3 -m pytest --verbose --junitxml=report.xml ci/tests.py tests rtest
        - ci/test_coverage.py --analyze
    # enable test coverage visualization in MR diff view
    coverage: '/  lines\.{6}: \d+\.\d+%/'
    artifacts:
        paths:
            - coverage/**
        reports:
            junit: ./report.xml
            cobertura: coverage.xml
    except:
        - tags

.linux_test_template: &linux_test_definition
    <<: *test_definition
    image: "$CI_REGISTRY_IMAGE/$IMAGE:$CI_COMMIT_SHA"

.linux_test_template_including_ctest: &linux_test_definition_including_ctest
    <<: *test_definition_including_ctest
    image: "$CI_REGISTRY_IMAGE/$IMAGE:$CI_COMMIT_SHA"

centos7-build:
    <<: *rpm_build_definition
    needs:
        - job: docker_build_centos7
          artifacts: false
        - job: portable-source
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: centos7

centos8-build:
    <<: *rpm_build_definition
    needs:
        - job: docker_build_centos8
          artifacts: false
        - job: portable-source
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: centos8

fedora32-build:
    <<: *rpm_build_definition
    needs:
        - job: docker_build_fedora32
          artifacts: false
        - job: portable-source
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: fedora32

fedora33-build:
    <<: *rpm_build_definition
    needs:
        - job: docker_build_fedora33
          artifacts: false
        - job: portable-source
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: fedora33

fedora34-build:
    <<: *rpm_build_definition
    needs:
        - job: docker_build_fedora34
          artifacts: false
        - job: portable-source
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: fedora34

ubuntu18-04-build:
    <<: *deb_build_definition
    needs:
        - job: docker_build_ubuntu-18.04
          artifacts: false
        - job: portable-source
          artifacts: true
    before_script:
        # Make Python.h findable
        - export C_INCLUDE_PATH="/usr/include/python3.6m"
        - export CPLUS_INCLUDE_PATH="/usr/include/python3.6m"
    tags:
        - linux
    variables:
      IMAGE: ubuntu-18.04

ubuntu20-04-debug-build:
    <<: *deb_build_definition
    needs:
        - job: docker_build_ubuntu-20.04
          artifacts: false
        - job: portable-source
          artifacts: true
    before_script:
        - export CFLAGS="-DDEBUG"
        - export CXXFLAGS="-DDEBUG"
    tags:
        - linux
    variables:
      IMAGE: ubuntu-20.04

ubuntu20-04-build:
    <<: *deb_build_definition
    needs:
        - job: docker_build_ubuntu-20.04
          artifacts: false
        - job: portable-source
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: ubuntu-20.04

ubuntu20-10-build:
    <<: *deb_build_definition
    needs:
        - job: docker_build_ubuntu-20.10
          artifacts: false
        - job: portable-source
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: ubuntu-20.10

ubuntu21-04-build:
    <<: *deb_build_definition
    needs:
        - job: docker_build_ubuntu-21.04
          artifacts: false
        - job: portable-source
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: ubuntu-21.04

out-of-source-build:
    <<: *deb_build_definition
    script:
        - logfile=`mktemp`
        - ci/out-of-source-build.sh |& tee $logfile
        - echo "$CI_JOB_NAME-warnings `grep -c 'warning:' $logfile`" > metrics.txt
        - rm $logfile
        - cat metrics.txt
    needs:
        - job: docker_build_ubuntu-21.04
          artifacts: false
        - job: portable-source
          artifacts: true
    tags:
        - linux
    artifacts:
        when: on_success
        expire_in: 1 week
        reports:
            metrics: metrics.txt
    variables:
      IMAGE: ubuntu-21.04

macos-autotools-build:
    <<: *macos_build_definition
    before_script:
        - export build_system="autotools"
    tags:
        - shared-macos-amd64

ubuntu18-04-cmake-build:
    <<: *deb_build_definition
    needs:
        - job: docker_build_ubuntu-18.04
          artifacts: false
        - job: portable-source
          artifacts: true
    before_script:
        - export build_system="cmake"
        # fail on any compiler warnings
        - export CFLAGS=-Werror
        - export CXXFLAGS=-Werror
        - echo experimental > COLLECTION
    tags:
        - linux
    variables:
      IMAGE: ubuntu-18.04

ubuntu20-10-cmake-build:
    <<: *deb_build_definition
    needs:
        - job: docker_build_ubuntu-20.10
          artifacts: false
        - job: portable-source
          artifacts: true
    before_script:
        - export build_system="cmake"
        # fail on any compiler warnings
        - export CFLAGS=-Werror
        - export CXXFLAGS=-Werror
        - echo experimental > COLLECTION
    tags:
        - linux
    variables:
      IMAGE: ubuntu-20.10

ubuntu20-10-cmake-ASan-build:
    <<: *deb_build_definition
    needs:
        - job: docker_build_ubuntu-20.10
          artifacts: false
        - job: portable-source
          artifacts: true
    before_script:
        - export build_system="cmake"
        # fail on any compiler warnings
        - export CFLAGS=-Werror
        - export CXXFLAGS=-Werror
        - export CMAKE_OPTIONS="-Duse_sanitizers=ON"
        - echo experimental > COLLECTION
    tags:
        - linux
    variables:
      IMAGE: ubuntu-20.10

ubuntu21-04-cmake-build:
    <<: *deb_build_definition
    needs:
        - job: docker_build_ubuntu-21.04
          artifacts: false
        - job: portable-source
          artifacts: true
    before_script:
        - export build_system="cmake"
        # fail on any compiler warnings
        - export CFLAGS=-Werror
        - export CXXFLAGS=-Werror
        - export CMAKE_OPTIONS="-Dwith_cxx_tests=ON"
        - echo experimental > COLLECTION
    tags:
        - linux
    variables:
      IMAGE: ubuntu-21.04

ubuntu21-04-cmake-ASan-build-for-ctest:
    <<: *deb_build_definition
    needs:
        - job: docker_build_ubuntu-21.04
          artifacts: false
        - job: portable-source
          artifacts: true
    before_script:
        - export build_system="cmake"
        # fail on any compiler warnings
        - export CFLAGS=-Werror
        - export CXXFLAGS=-Werror
        - export CMAKE_OPTIONS="-Duse_sanitizers=ON -Duse_coverage=ON -Dwith_cxx_tests=ON "
        - echo experimental > COLLECTION
    # override the deb_build_definition artifacts since we need more
    # files from the build directory when running ctest in the test
    # stage.
    artifacts:
        when: on_success
        expire_in: 1 week
        paths:
            # archive all shared libraries produced directly by "cmake
            # --build" (but not those in the install directory that
            # cpack has copied). In the test stage, the test
            # executables load them from those directory locations
            # since LD_LIBRARY_PATH is automatically set up to contain
            # them.
            - build/lib/**/lib*.so.*
            - build/plugin/**/lib*.so.*
            # the coverage analysis needs the .gcno files
            - build/**/*.gcno
            # the packages need to be installed for the post-install tests
            - Packages/*/*/*/*/*/*deb
            - Metadata/*/*/*/configure.log
        reports:
            metrics: metrics.txt
    tags:
        - linux
    variables:
      IMAGE: ubuntu-21.04

centos7-cmake-build:
    <<: *rpm_build_definition
    needs:
        - job: docker_build_centos7
          artifacts: false
        - job: portable-source
          artifacts: true
    before_script:
        - export build_system="cmake"
        # fail on any compiler warnings
        - export CFLAGS=-Werror
        - export CXXFLAGS=-Werror
        - echo experimental > COLLECTION
    tags:
        - linux
    variables:
      IMAGE: centos7

fedora32-cmake-build:
    <<: *rpm_build_definition
    needs:
        - job: docker_build_fedora32
          artifacts: false
        - job: portable-source
          artifacts: true
    before_script:
        - export build_system="cmake"
        # fail on any compiler warnings
        - export CFLAGS=-Werror
        - export CXXFLAGS=-Werror
        - echo experimental > COLLECTION
    tags:
        - linux
    variables:
      IMAGE: fedora32

macos-cmake-build:
    <<: *macos_build_definition
    before_script:
        - export build_system="cmake"
        # fail on any compiler warnings
        - export CFLAGS=-Werror
        - export CXXFLAGS=-Werror
    tags:
        - shared-macos-amd64

windows-cmake-Win32-release-build:
    <<: *windows_build_definition
    before_script:
        - $Env:generator = "Visual Studio 16 2019"
        - $Env:project_platform = "Win32"
        - $Env:configuration = "Release"
        - $Env:build_system = "cmake"

windows-cmake-Win32-debug-build:
    <<: *windows_build_definition
    before_script:
        - $Env:generator = "Visual Studio 16 2019"
        - $Env:project_platform = "Win32"
        - $Env:configuration = "Debug"
        - $Env:build_system = "cmake"

windows-cmake-x64-release-build:
    <<: *windows_build_definition
    before_script:
        - $Env:generator = "Visual Studio 16 2019"
        - $Env:project_platform = "x64"
        - $Env:configuration = "Release"
        - $Env:build_system = "cmake"

windows-cmake-x64-debug-build:
    <<: *windows_build_definition
    before_script:
        - $Env:generator = "Visual Studio 16 2019"
        - $Env:project_platform = "x64"
        - $Env:configuration = "Debug"
        - $Env:build_system = "cmake"

windows-msbuild-Win32-release-build:
    <<: *windows_build_definition
    before_script:
        - $Env:project_platform = "Win32"
        - $Env:configuration = "Release"
        - $Env:build_system = "msbuild"

windows-msbuild-Win32-debug-build:
    <<: *windows_build_definition
    before_script:
        - $Env:project_platform = "Win32"
        - $Env:configuration = "Debug"
        - $Env:build_system = "msbuild"

meta-data:
    stage: test
    script:
        - CONFIGURE_LOGS=Metadata/*/*/*/configure.log
        - ci/generate_configuration_table.py --output-format HTML ${CONFIGURE_LOGS} > configuration-long-no-color.html
        - ci/generate_configuration_table.py --output-format HTML --short ${CONFIGURE_LOGS} > configuration-short-no-color.html
        - ci/generate_configuration_table.py --output-format HTML --short --color ${CONFIGURE_LOGS} > configuration-short-color-green-red.html
        - ci/generate_configuration_table.py --output-format HTML --short --colors black:red ${CONFIGURE_LOGS} > configuration-short-color-red-only.html
    artifacts:
        paths:
            - configuration-*.html
    except:
        - tags

ubuntu18-04-test:
    <<: *linux_test_definition
    before_script:
        - export build_system="autotools"
    needs:
        - job: portable-source
          artifacts: true
        - job: "ubuntu18-04-build"
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: ubuntu-18.04

ubuntu20-04-test:
    <<: *linux_test_definition
    before_script:
        - export build_system="autotools"
    needs:
        - job: portable-source
          artifacts: true
        - job: "ubuntu20-04-build"
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: ubuntu-20.04

ubuntu20-10-test:
    <<: *linux_test_definition
    before_script:
        - export build_system="autotools"
    needs:
        - job: portable-source
          artifacts: true
        - job: "ubuntu20-10-build"
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: ubuntu-20.10

ubuntu21-04-test:
    <<: *linux_test_definition
    before_script:
        - export build_system="autotools"
    needs:
        - job: portable-source
          artifacts: true
        - job: "ubuntu21-04-build"
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: ubuntu-21.04

centos7-test:
    <<: *linux_test_definition
    before_script:
        - export build_system="autotools"
    needs:
        - job: portable-source
          artifacts: true
        - job: "centos7-build"
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: centos7

centos8-test:
    <<: *linux_test_definition
    before_script:
        - export build_system="autotools"
    needs:
        - job: portable-source
          artifacts: true
        - job: "centos8-build"
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: centos8

fedora32-test:
    <<: *linux_test_definition
    before_script:
        - export build_system="autotools"
    needs:
        - job: portable-source
          artifacts: true
        - job: "fedora32-build"
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: fedora32

fedora33-test:
    <<: *linux_test_definition
    before_script:
        - export build_system="autotools"
    needs:
        - job: portable-source
          artifacts: true
        - job: "fedora33-build"
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: fedora33

fedora34-test:
    <<: *linux_test_definition
    before_script:
        - export build_system="autotools"
    needs:
        - job: portable-source
          artifacts: true
        - job: "fedora34-build"
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: fedora34

macos-autotools-test:
    <<: *test_definition
    before_script:
        - brew update
        - brew install pango || brew upgrade pango
        - brew install libxaw || brew upgrade libxaw
        - python3 -m pip install --requirement requirements.txt
        - export build_system="autotools"
    needs:
        - job: "macos-autotools-build"
          artifacts: true
    tags:
        - shared-macos-amd64
    image: macos-11-xcode-12
    # Most submitters don't have access to the macOS runners, and if they try
    # to run macOS pipeline jobs, the jobs will hang forever.  This variable is
    # only set on repos that have access to macOS runners, in GitLab repo
    # settings.
    # https://gitlab.com/graphviz/graphviz/-/settings/ci_cd
    only:
        variables:
          - $ENABLE_GRAPHVIZ_MACOS_CI

ubuntu18-04-cmake-test:
    <<: *linux_test_definition
    before_script:
        - export build_system="cmake"
        - echo experimental > COLLECTION
    needs:
        - job: portable-source
          artifacts: true
        - job: "ubuntu18-04-cmake-build"
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: ubuntu-18.04

ubuntu20-10-cmake-test:
    <<: *linux_test_definition
    before_script:
        - export build_system="cmake"
        - echo experimental > COLLECTION
    needs:
        - job: portable-source
          artifacts: true
        - job: "ubuntu20-10-cmake-build"
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: ubuntu-20.10

ubuntu20-10-cmake-ASan-test:
    <<: *linux_test_definition
    before_script:
        - export build_system="cmake"
        - export CFLAGS=" -g -fsanitize=address,undefined"
        - export CXXFLAGS=" -g -fsanitize=address,undefined"
        - export LDFLAGS=" -g -fsanitize=address,undefined"
        # FIXME: remove the following when Graphviz can pass the test suite
        # leak-free
        - export ASAN_OPTIONS=detect_leaks=0
        - echo experimental > COLLECTION
    needs:
        - job: portable-source
          artifacts: true
        - job: "ubuntu20-10-cmake-ASan-build"
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: ubuntu-20.10

ubuntu21-04-cmake-test:
    <<: *linux_test_definition
    before_script:
        - export build_system="cmake"
        - echo experimental > COLLECTION
    needs:
        - job: portable-source
          artifacts: true
        - job: "ubuntu21-04-cmake-build"
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: ubuntu-21.04

ubuntu21.04-cmake-ASan-test-including-ctest:
    <<: *linux_test_definition_including_ctest
    before_script:
        - export build_system="cmake"
        - export CFLAGS=" -g -fsanitize=address,undefined"
        - export CXXFLAGS=" -g -fsanitize=address,undefined"
        - export LDFLAGS=" -g -fsanitize=address,undefined"
        - echo experimental > COLLECTION
    needs:
        - job: portable-source
          artifacts: true
        - job: "ubuntu21-04-cmake-ASan-build-for-ctest"
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: ubuntu-21.04

centos7-cmake-test:
    <<: *linux_test_definition
    before_script:
        - export build_system="cmake"
        - echo experimental > COLLECTION
        # Graphviz libs are installed in /usr/lib, but Centos 7 doesn't look there by default
        - export LD_LIBRARY_PATH=/usr/lib
    needs:
        - job: portable-source
          artifacts: true
        - job: "centos7-cmake-build"
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: centos7

fedora32-cmake-test:
    <<: *linux_test_definition
    before_script:
        - export build_system="cmake"
        - echo experimental > COLLECTION
    needs:
        - job: portable-source
          artifacts: true
        - job: "fedora32-cmake-build"
          artifacts: true
    tags:
        - linux
    variables:
      IMAGE: fedora32

macos-cmake-test:
    <<: *test_definition
    before_script:
        - brew update
        - brew install pango || brew upgrade pango
        - brew install libxaw || brew upgrade libxaw
        - python3 -m pip install --requirement requirements.txt
        - export build_system="cmake"
    needs:
        - job: "macos-cmake-build"
          artifacts: true
    tags:
        - shared-macos-amd64
    image: macos-11-xcode-12
    # Most submitters don't have access to the macOS runners, and if they try
    # to run macOS pipeline jobs, the jobs will hang forever.  This variable is
    # only set on repos that have access to macOS runners, in GitLab repo
    # settings.
    # https://gitlab.com/graphviz/graphviz/-/settings/ci_cd
    only:
        variables:
          - $ENABLE_GRAPHVIZ_MACOS_CI

deployment:
    stage: deploy
    image: registry.gitlab.com/gitlab-org/release-cli:latest
    # do not re-run this job for new Git tags of previously seen commits
    except:
        - tags
    before_script:
        - apk add --update-cache curl
        - apk add --update-cache python3
    script:
        - python3 ci/deploy.py --verbose
    # do not run this job for MRs, developer’s forks, etc.
    only:
        - main@graphviz/graphviz
    artifacts:
        when: on_success
        expire_in: 1 week
        paths:
            - graphviz-*.json

.docker_template: &docker_definition
  image: docker:stable
  services:
    - docker:dind
  before_script:
    # Docker prefers passwords passed on stdin rather than as arguments,
    # presumably because stdin isn't visible to other processes.
    # $CI_JOB_TOKEN is documented at
    # https://docs.gitlab.com/ee/user/project/new_ci_build_permissions_model.html#job-token
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
  # do not re-run this job for new Git tags of previously seen commits
  except:
    - tags

.docker_build_template: &docker_build_definition
  <<: *docker_definition
  stage: build_docker_images
  script:
    # fetches the :latest image (not failing if image is not found) for caching
    - docker pull $CI_REGISTRY_IMAGE/$IMAGE:latest || true
    # Build and push with git commit SHA tag, reusing layers from the :latest image if possible
    - DOCKER_BUILDKIT=1 docker build -t $CI_REGISTRY_IMAGE/$IMAGE:$CI_COMMIT_SHA --cache-from $CI_REGISTRY_IMAGE/$IMAGE:latest -f ci/$IMAGE/Dockerfile --build-arg BUILDKIT_INLINE_CACHE=1 .
    - docker push $CI_REGISTRY_IMAGE/$IMAGE:$CI_COMMIT_SHA

.docker_push_template: &docker_push_definition
  <<: *docker_definition
  stage: push_docker_images
  variables:
    # Docker pull and push doesn't need GitLab to clone the source code.
    # Skipping code checkout should speed up execution a little.
    GIT_STRATEGY: none
  only:
    refs:
      # Only main should be pushed to :latest, not unmerged merge-requests.
      # It's ok for this to run on other repos (not just graphviz/graphviz) as
      # they have their own container registries.
      - main
  script:
    - docker pull $CI_REGISTRY_IMAGE/$IMAGE:$CI_COMMIT_SHA
    # Re-tag, push to :latest tag
    - docker tag $CI_REGISTRY_IMAGE/$IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/$IMAGE:latest
    - docker push     $CI_REGISTRY_IMAGE/$IMAGE:latest

docker_build_centos7:
  <<: *docker_build_definition
  variables:
    IMAGE: centos7

docker_build_centos8:
  <<: *docker_build_definition
  variables:
    IMAGE: centos8

docker_build_fedora32:
  <<: *docker_build_definition
  variables:
    IMAGE: fedora32

docker_build_fedora33:
  <<: *docker_build_definition
  variables:
    IMAGE: fedora33

docker_build_fedora34:
  <<: *docker_build_definition
  variables:
    IMAGE: fedora34

docker_build_ubuntu-18.04:
  <<: *docker_build_definition
  variables:
    IMAGE: ubuntu-18.04

docker_build_ubuntu-20.04:
  <<: *docker_build_definition
  variables:
    IMAGE: ubuntu-20.04

docker_build_ubuntu-20.10:
  <<: *docker_build_definition
  variables:
    IMAGE: ubuntu-20.10

docker_build_ubuntu-21.04:
  <<: *docker_build_definition
  variables:
    IMAGE: ubuntu-21.04

docker_push_centos7:
  <<: *docker_push_definition
  variables:
    IMAGE: centos7
  needs:
    - docker_build_centos7

docker_push_centos8:
  <<: *docker_push_definition
  variables:
    IMAGE: centos8
  needs:
    - docker_build_centos8

docker_push_fedora32:
  <<: *docker_push_definition
  variables:
    IMAGE: fedora32
  needs:
    - docker_build_fedora32

docker_push_fedora33:
  <<: *docker_push_definition
  variables:
    IMAGE: fedora33
  needs:
    - docker_build_fedora33

docker_push_fedora34:
  <<: *docker_push_definition
  variables:
    IMAGE: fedora34
  needs:
    - docker_build_fedora34

docker_push_ubuntu-18.04:
  <<: *docker_push_definition
  variables:
    IMAGE: ubuntu-18.04
  needs:
    - docker_build_ubuntu-18.04

docker_push_ubuntu-20.04:
  <<: *docker_push_definition
  variables:
    IMAGE: ubuntu-20.04
  needs:
    - docker_build_ubuntu-20.04

docker_push_ubuntu-20.10:
  <<: *docker_push_definition
  variables:
    IMAGE: ubuntu-20.10
  needs:
    - docker_build_ubuntu-20.10

docker_push_ubuntu-21.04:
  <<: *docker_push_definition
  variables:
    IMAGE: ubuntu-21.04
  needs:
    - docker_build_ubuntu-21.04

lint_pylint:
  image: "$CI_REGISTRY_IMAGE/ubuntu-21.04:$CI_COMMIT_SHA"
  stage: test
  needs:
    - docker_build_ubuntu-21.04
  script:
    - logfile=`mktemp`
    - python3 -m pylint --rcfile=.pylintrc `find . -name '*.py' | xargs` --exit-zero |& tee $logfile
    - echo "$CI_JOB_NAME-warnings `egrep -c '\<[CRWEF][[:digit:]]{4}\>' $logfile`" > metrics.txt
    - rm $logfile
    - cat metrics.txt
    - python3 -m pylint --errors-only --rcfile=.pylintrc `find . -name '*.py' | xargs`
  artifacts:
    when: on_success
    expire_in: 1 week
    reports:
        metrics: metrics.txt
  except:
    - tags
